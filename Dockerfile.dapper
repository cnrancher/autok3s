# FROM registry.suse.com/bci/golang:1.20
FROM registry.suse.com/bci/bci-base:latest
ARG PROXY
ARG GOPROXY
ARG ARCH=amd64
ARG GO_VERSION=1.20.8
RUN curl -sSL https://go.dev/dl/go${GO_VERSION}.linux-${ARCH}.tar.gz -o /tmp/go.tar.gz \
    && rm -rf /usr/local/go && tar -C /usr/local -xzf /tmp/go.tar.gz \
    && /usr/local/go/bin/go version
ENV GOPATH=/go PATH=/go/bin:/usr/local/go/bin:/root/go/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
RUN zypper -n install netcat wget curl gawk git make
RUN zypper install -y -f docker
## install golangci-lint
RUN if [ "$(go env GOARCH)" = "amd64" ]; then \
    export HTTPS_PROXY=${PROXY}; \
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.54.2; \
    golangci-lint --version; \
    fi
## install mockgen
RUN if [ "$(go env GOARCH)" = "amd64" ]; then \
    go install github.com/golang/mock/mockgen@v1.6.0; \
    mockgen --version; \
    fi
## install ginkgo
RUN if [ "$(go env GOARCH)" = "amd64" ]; then \
    go install github.com/onsi/ginkgo/v2/ginkgo@v2.6.1; \
    ginkgo version; \
    fi
## install upx
RUN if [ "$(go env GOARCH)" = "amd64" ]; then \
    export HTTPS_PROXY=${PROXY}; \
    curl -sSL https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz | tar -xvJf - -C /tmp/; \
    mv /tmp/upx-3.96-amd64_linux/upx /usr/bin/ && rm -rf /tmp/upx-3.96-amd64_linux; \
    fi
# -- for make rules

# -- for dapper
ENV DAPPER_RUN_ARGS --privileged --network host
ENV GO111MODULE=on
ENV AUTOK3S_DEV_MODE=true
ENV DAPPER_ENV CROSS DRONE_TAG REPO TAG OS ARCH IMAGE_NAME DIRTY_CHECK GOPROXY
ENV DAPPER_SOURCE /go/src/github.com/cnrancher/autok3s/
ENV DAPPER_OUTPUT ./bin ./dist
ENV DAPPER_DOCKER_SOCKET true
ENV HOME ${DAPPER_SOURCE}
# -- for dapper

WORKDIR ${DAPPER_SOURCE}
ENTRYPOINT ["hack/make-rules/autok3s.sh"]
